import os
import json
import logging
import pytz
from typing import Dict, Any
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv
from gpt_command_parser import GPTCommandParser, ParsingError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('telegram_bot.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context: Dict[int, Dict[str, Any]] = {}

def log_user_action(user_id: int, username: str, action: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User {user_id} (@{username}): {action}")

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.effective_user:
        return
        
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    log_user_action(user_id, username, "–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ —Ä–∞–∑–¥–µ–ª—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "\"–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç –§–µ—Å—Ç–∏–≤–∞–ª—å –ì–¢–û —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∞—Ä–µ–Ω–¥–∞, —Å—É–¥—å–∏ –∏ –∑–≤—É–∫\"\n\n"
        "–Ø –ø–æ–π–º—É —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É! üìä"
    )
    update.message.reply_text(welcome_message)

def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.effective_user:
        return
        
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    log_user_action(user_id, username, "–ó–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–æ–π /help")
    
    help_text = (
        "ü§ñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "1Ô∏è‚É£ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "2Ô∏è‚É£ –ü–æ–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
        "3Ô∏è‚É£ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ \"–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç –î–µ–Ω—å –≥–æ—Ä–æ–¥–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å—Ü–µ–Ω–∞, –∑–≤—É–∫ –∏ —Å–≤–µ—Ç\"\n"
        "‚Ä¢ \"–ù—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ú–∞—Ä–∞—Ñ–æ–Ω, —Ä–∞–∑–¥–µ–ª—ã: –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, —Ä–µ–∫–ª–∞–º–∞\"\n"
        "‚Ä¢ \"–°–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É –§–µ—Å—Ç–∏–≤–∞–ª—å –∫—Ä–∞—Å–æ–∫ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏\"\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å! üòä"
    )
    update.message.reply_text(help_text)

def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.effective_user:
        return
        
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    message_text = update.message.text
    
    log_user_action(user_id, username, f"–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if 'parser' not in context.bot_data:
            context.bot_data['parser'] = GPTCommandParser()
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        result = context.bot_data['parser'].parse_command(message_text)
        
        if result["is_create_table_command"]:
            if result["project_name"] and result["sections"]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_context[user_id] = {
                    "project_name": result["project_name"],
                    "sections": result["sections"],
                    "awaiting_confirmation": True
                }
                
                confirmation_message = (
                    f"üìã –Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {result['project_name']}\n"
                    f"üìë –†–∞–∑–¥–µ–ª—ã:\n" + 
                    "\n".join(f"   ‚Ä¢ {section}" for section in result['sections']) +
                    "\n\n–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'"
                )
                update.message.reply_text(confirmation_message)
                log_user_action(user_id, username, "–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
                
            else:
                error_message = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\"–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç –î–µ–Ω—å –≥–æ—Ä–æ–¥–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å—Ü–µ–Ω–∞, –∑–≤—É–∫ –∏ —Å–≤–µ—Ç\""
                update.message.reply_text(error_message)
                log_user_action(user_id, username, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
                
        elif user_id in user_context and user_context[user_id].get("awaiting_confirmation"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if message_text.lower() in ["–¥–∞", "yes", "–∫–æ–Ω–µ—á–Ω–æ", "–≤–µ—Ä–Ω–æ"]:
                project_data = user_context[user_id]
                # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                success_message = (
                    f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç \"{project_data['project_name']}\" "
                    f"—Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏:\n" +
                    "\n".join(f"   ‚Ä¢ {section}" for section in project_data['sections'])
                )
                update.message.reply_text(success_message)
                log_user_action(user_id, username, f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ {project_data['project_name']}")
                del user_context[user_id]
                
            elif message_text.lower() in ["–Ω–µ—Ç", "no", "–Ω–µ–≤–µ—Ä–Ω–æ", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"]:
                update.message.reply_text("üîÑ –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∑–∞–Ω–æ–≤–æ.")
                log_user_action(user_id, username, "–û—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
                del user_context[user_id]
                
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            update.message.reply_text("ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            log_user_action(user_id, username, "–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
            
    except ParsingError as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        update.message.reply_text(error_message)
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        
    except Exception as e:
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        update.message.reply_text(error_message)
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

def error_handler(update: Update, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update.effective_message:
        update.effective_message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if not token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        # –°–æ–∑–¥–∞–µ–º Updater
        updater = Updater(token)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dispatcher = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    main()
