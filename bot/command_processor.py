import os
import json
import logging
from typing import Dict, List, Tuple, Optional
from openai import OpenAI
from dotenv import load_dotenv
from .sheets_api import GoogleSheetsAPI
import telegram

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('command_processor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CommandProcessor:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∫–æ–º–∞–Ω–¥.
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—ã API.
        """
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CommandProcessor")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            load_dotenv()
            logger.debug("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not os.getenv('OPENAI_API_KEY'):
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            if not os.getenv('TELEGRAM_TOKEN'):
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
            self.openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
            logger.info("OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
            self.bot = telegram.Bot(token=os.getenv('TELEGRAM_TOKEN'))
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Google Sheets
            self.sheets_api = GoogleSheetsAPI()
            logger.info("Google Sheets API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è –≤ Google Sheets
            self.sheets_api.authenticate()
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API")
            
            logger.info("CommandProcessor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CommandProcessor: {str(e)}")
            raise

    async def initialize(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            await self._check_telegram_connection()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

    async def _check_telegram_connection(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        try:
            me = await self.bot.get_me()
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ. –ò–º—è –±–æ—Ç–∞: {me.first_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {str(e)}")
            raise

    def _extract_project_info(self, message: str) -> Tuple[Optional[str], Optional[List[str]]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é ChatGPT.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[Optional[str], Optional[List[str]]]: –ö–æ—Ä—Ç–µ–∂ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤)
        """
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
            prompt = f"""
            –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
            
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
            - "–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç X —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ A, B, C"
            - "–°–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É X —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ A –∏ B"
            - "–ù—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ X —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ A, B"
            
            –¢–µ–±–µ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å:
            1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            2. –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            
            –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "—Å —Ä–∞–∑–¥–µ–ª–∞–º–∏", –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∏—Ö –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ã.
            –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª—ã –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ "–∏" –∏–ª–∏ –∑–∞–ø—è—Ç—É—é - —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö.
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "project_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                "sections": ["—Ä–∞–∑–¥–µ–ª1", "—Ä–∞–∑–¥–µ–ª2", ...]
            }}
            
            –ü—Ä–∏–º–µ—Ä—ã:
            
            –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '–°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç "–†–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–∞" —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ä–∞–±–æ—Ç—ã'
            –û—Ç–≤–µ—Ç: {{"project_name": "–†–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–∞", "sections": ["–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "—Ä–∞–±–æ—Ç—ã"]}}
            
            –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '–°–¥–µ–ª–∞–π —Ç–∞–±–ª–∏—Ü—É –§–µ—Å—Ç–∏–≤–∞–ª—å –∫—Ä–∞—Å–æ–∫ —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞–º–∏'
            –û—Ç–≤–µ—Ç: {{"project_name": "–§–µ—Å—Ç–∏–≤–∞–ª—å –∫—Ä–∞—Å–æ–∫", "sections": ["–≤–æ–ª–æ–Ω—Ç–µ—Ä—ã", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã"]}}
            
            –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤—Å–µ–º –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç - –≤–µ—Ä–Ω–∏ null.
            
            –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {message}
            """
            
            logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT: {prompt}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ ChatGPT API")
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = json.loads(response.choices[0].message.content)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: {json.dumps(result, ensure_ascii=False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if not result or not result.get("project_name") or not result.get("sections"):
                logger.warning("ChatGPT –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null")
                return None, None
            
            return result["project_name"], result["sections"]
            
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT: {str(e)}")
            return None, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None, None

    def process_command(self, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
            logger.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
            project_name, sections = self._extract_project_info(message)
            
            if not project_name or not sections:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∏–Ω–∞—á–µ."
                logger.error(error_msg)
                return error_msg
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: project_name='{project_name}', sections={sections}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_data = {
                "project_name": project_name,
                "sections": sections
            }
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(project_data, ensure_ascii=False)}")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
                sheet_id = self.sheets_api.create_project_sheet(project_data)
                logger.info(f"–õ–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {sheet_id}")
                
                success_message = f"""
                ‚úÖ –õ–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
                
                üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}
                üìë –†–∞–∑–¥–µ–ª—ã: {', '.join(sections)}
                üîó ID –ª–∏—Å—Ç–∞: {sheet_id}
                """
                
                logger.info("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                return success_message
            except Exception as sheet_error:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: {str(sheet_error)}"
                logger.error(error_msg)
                return f"‚ùå {error_msg}"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            logger.error(error_msg)
            return f"‚ùå {error_msg}"

    async def send_telegram_message(self, chat_id: int, text: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            await self.bot.send_message(chat_id=chat_id, text=text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            raise

    async def process_message(self, message: dict) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram.
        
        Args:
            message: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
        """
        try:
            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram")
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_id = message.chat["id"]
            text = message.text or ""
            
            if not chat_id or not text:
                logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
                
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç chat_id {chat_id}: {text}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
            if text == '/start':
                welcome_message = """
                üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –≤ Google Sheets.
                
                üìù –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                –°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Ä–∞–∑–¥–µ–ª1, —Ä–∞–∑–¥–µ–ª2, —Ä–∞–∑–¥–µ–ª3
                
                –ù–∞–ø—Ä–∏–º–µ—Ä:
                –°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç "–†–µ–º–æ–Ω—Ç –æ—Ñ–∏—Å–∞" —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ä–∞–±–æ—Ç—ã
                """
                await self.send_telegram_message(chat_id, welcome_message)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            response = self.process_command(text)
            await self.send_telegram_message(chat_id, response)
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {text}")
            
        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            logger.error(error_message)
            await self.send_telegram_message(chat_id, error_message)
