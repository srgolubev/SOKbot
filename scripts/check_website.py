#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–∞
"""

import argparse
import json
import os
import sys
import time
from datetime import datetime

import requests
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_DOMAIN = "srgolubev.ru"
DEFAULT_BOT_SERVER = "212.224.118.58"
DEFAULT_PORT = 8000


def print_colored(text, color=Fore.GREEN, bold=False):
    """–í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if bold:
        print(f"{color}{Style.BRIGHT}{text}{Style.RESET_ALL}")
    else:
        print(f"{color}{text}{Style.RESET_ALL}")


def check_website(domain, verbose=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–∞"""
    url = f"https://{domain}"
    try:
        start_time = time.time()
        response = requests.get(url, timeout=10)
        elapsed_time = time.time() - start_time
        
        if response.status_code == 200:
            print_colored(f"‚úÖ –í–µ–±-—Å–∞–π—Ç {url} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å {response.status_code})", Fore.GREEN, True)
            print_colored(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥", Fore.GREEN)
            
            if verbose:
                content_type = response.headers.get('Content-Type', '')
                print_colored(f"   Content-Type: {content_type}", Fore.CYAN)
                print_colored(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç", Fore.CYAN)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if 'text/html' in content_type:
                    if '<html' in response.text.lower():
                        print_colored(f"   HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚úì", Fore.GREEN)
                    else:
                        print_colored(f"   ‚ö†Ô∏è HTML-—Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ", Fore.YELLOW)
            
            return True
        else:
            print_colored(f"‚ùå –í–µ–±-—Å–∞–π—Ç {url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}", Fore.RED, True)
            return False
    except requests.exceptions.RequestException as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}: {str(e)}", Fore.RED, True)
        return False


def check_test_page(domain, verbose=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    url = f"https://{domain}/test.html"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            print_colored(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –¥–æ—Å—Ç—É–ø–Ω–∞", Fore.GREEN, True)
            
            if verbose and 'text/html' in response.headers.get('Content-Type', ''):
                if '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' in response.text:
                    print_colored(f"   –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚úì", Fore.GREEN)
                else:
                    print_colored(f"   ‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", Fore.YELLOW)
            
            return True
        else:
            print_colored(f"‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å {response.status_code}", Fore.RED, True)
            return False
    except requests.exceptions.RequestException as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}: {str(e)}", Fore.RED, True)
        return False


def check_webhook_endpoint(domain, verbose=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ–±—Ö—É–∫–∞"""
    url = f"https://{domain}/webhook"
    try:
        response = requests.get(url, timeout=10)
        # –í–µ–±—Ö—É–∫ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 405 Method Not Allowed –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if response.status_code in [200, 404, 405]:
            print_colored(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞ {url} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å {response.status_code})", Fore.GREEN, True)
            if verbose:
                print_colored(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å 405 –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–µ–±—Ö—É–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ", Fore.CYAN)
            return True
        else:
            print_colored(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞ {url} –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}", Fore.RED, True)
            return False
    except requests.exceptions.RequestException as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}: {str(e)}", Fore.RED, True)
        return False


def check_health_endpoint(domain=None, bot_server=None, port=None, verbose=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    if domain:
        url = f"https://{domain}/health"
    elif bot_server:
        url = f"http://{bot_server}:{port}/health"
    else:
        print_colored("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –¥–æ–º–µ–Ω, –Ω–∏ —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞", Fore.RED, True)
        return False
    
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            print_colored(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {url} –¥–æ—Å—Ç—É–ø–µ–Ω", Fore.GREEN, True)
            
            try:
                health_data = response.json()
                if verbose:
                    print_colored("   –î–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:", Fore.CYAN)
                    print(json.dumps(health_data, indent=4, ensure_ascii=False))
                
                status = health_data.get('status', 'unknown')
                if status == 'ok':
                    print_colored(f"   –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status} ‚úì", Fore.GREEN)
                else:
                    print_colored(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}", Fore.YELLOW)
            except json.JSONDecodeError:
                print_colored(f"   ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON", Fore.YELLOW)
            
            return True
        else:
            print_colored(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è {url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}", Fore.RED, True)
            return False
    except requests.exceptions.RequestException as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {url}: {str(e)}", Fore.RED, True)
        return False


def check_direct_bot_server(bot_server, port, verbose=False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –±–æ—Ç–∞"""
    url = f"http://{bot_server}:{port}/health"
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            print_colored(f"‚úÖ –°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ {url} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é", Fore.GREEN, True)
            return True
        else:
            print_colored(f"‚ùå –°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ {url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}", Fore.RED, True)
            return False
    except requests.exceptions.RequestException as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É –±–æ—Ç–∞ {url}: {str(e)}", Fore.RED, True)
        return False


def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–∞ –∏ –≤–µ–±—Ö—É–∫–∞")
    parser.add_argument("-d", "--domain", default=DEFAULT_DOMAIN, help=f"–î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_DOMAIN})")
    parser.add_argument("-b", "--bot-server", default=DEFAULT_BOT_SERVER, help=f"IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –±–æ—Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_BOT_SERVER})")
    parser.add_argument("-p", "--port", type=int, default=DEFAULT_PORT, help=f"–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –±–æ—Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_PORT})")
    parser.add_argument("-v", "--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--skip-website", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ–±-—Å–∞–π—Ç–∞")
    parser.add_argument("--skip-test-page", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    parser.add_argument("--skip-webhook", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ–±—Ö—É–∫–∞")
    parser.add_argument("--skip-health", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    parser.add_argument("--skip-direct", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –±–æ—Ç–∞")
    
    args = parser.parse_args()
    
    print_colored(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})", Fore.CYAN, True)
    print_colored(f"   –î–æ–º–µ–Ω: {args.domain}", Fore.CYAN)
    print_colored(f"   –°–µ—Ä–≤–µ—Ä –±–æ—Ç–∞: {args.bot_server}:{args.port}", Fore.CYAN)
    print("-" * 60)
    
    results = {}
    
    if not args.skip_website:
        results['website'] = check_website(args.domain, args.verbose)
        print("-" * 60)
    
    if not args.skip_test_page:
        results['test_page'] = check_test_page(args.domain, args.verbose)
        print("-" * 60)
    
    if not args.skip_webhook:
        results['webhook'] = check_webhook_endpoint(args.domain, args.verbose)
        print("-" * 60)
    
    if not args.skip_health:
        results['health'] = check_health_endpoint(args.domain, verbose=args.verbose)
        print("-" * 60)
    
    if not args.skip_direct:
        results['direct'] = check_direct_bot_server(args.bot_server, args.port, args.verbose)
        print("-" * 60)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success_count = sum(1 for result in results.values() if result)
    total_count = len(results)
    
    if total_count > 0:
        success_rate = (success_count / total_count) * 100
        print_colored(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ ({success_rate:.1f}%)", 
                     Fore.GREEN if success_rate == 100 else Fore.YELLOW if success_rate >= 50 else Fore.RED, 
                     True)
    else:
        print_colored("‚ùó –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", Fore.YELLOW, True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    return 0 if all(results.values()) else 1


if __name__ == "__main__":
    sys.exit(main())
